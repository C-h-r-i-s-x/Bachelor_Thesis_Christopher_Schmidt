/- Imports -/
import tactic

import data.rel
import data.list.defs
import data.matrix.basic
import data.fintype.card

import logic.equiv.defs
import group_theory.perm.sign

import set_theory.zfc.basic

import linear_algebra.matrix.determinant

open_locale big_operators 
open function

universe u
/-
# Directed Simple Graph and its Extensions
-/
/-- A `directed simple graph`. -/
@[ext]
structure directed_simple_graph (V : Type u) := (adj : V → V → Prop)

namespace directed_simple_graph

variable {V : Type u}
variable (G : directed_simple_graph V)

/- Not useful. -/
def directed_simple_graph2 : Type u → Type u → Type := λ V V, Prop 
/-
## Directed *Loopless* Simple Graph
-/
/-- A `directed loopless simple graph`. -/
@[ext]
structure directed_loopless_simple_graph (V : Type u)
  extends directed_simple_graph V :=
(loopless : irreflexive adj . obviously)
/-
## Directed *Finite* Simple Graph
-/
/-- A `directed finite simple graph`. -/
@[ext]
structure directed_finite_simple_graph (V : Type u) 
  extends directed_simple_graph V :=
(finite : fintype V)
/-
# Vertex Stuff
-/
/-
## Support
-/
/-- `G.support` is the set of vertices that form edges in `G`. -/
def support : set V := rel.dom G.adj

lemma mem_support {v : V} : 
 v ∈ G.support ↔ ∃ w, G.adj v w := iff.rfl
/-
## Neighbors
-/
/-- `G.neighbor_set v` is the set of vertices adjacent to `v` in `G`. -/
def neighbor_set (v : V) : set V := set_of (G.adj v)

instance neighbor_set.mem_decidable (v : V) [decidable_rel G.adj] :
  decidable_pred (∈ G.neighbor_set v) := by 
{ unfold neighbor_set, apply_instance }

/-- The set of common neighbors between two vertices `v` and `w` 
in a graph `G` is the intersection of the neighbor sets of `v` and `w`. -/
def common_neighbors (v w : V) : set V := G.neighbor_set v ∩ G.neighbor_set w

/-- A graph is locally finite if every vertex has a finite neighbor set. -/
@[reducible]
def locally_finite := Π (v : V), fintype (G.neighbor_set v)

@[simp] lemma mem_neighbor_set (v w : V) : w ∈ G.neighbor_set v ↔ G.adj v w :=
iff.rfl
/-
# Edge Stuff
-/
/-
## Darts
-/
/-- A `dart` is an oriented edge, 
implemented as an ordered pair of adjacent vertices. -/
@[ext, derive decidable_eq]
structure dart extends V × V := (is_adj : G.adj fst snd)

/-- The first vertex for the dart. -/
abbreviation dart.fst (d : G.dart) : V := d.fst

/-- The second vertex for the dart. -/
abbreviation dart.snd (d : G.dart) : V := d.snd

lemma dart.to_prod_injective : 
  function.injective (dart.to_prod : G.dart → V × V) := 
dart.ext

instance dart.fintype [fintype V] [decidable_rel G.adj] : fintype G.dart :=
fintype.of_equiv (Σ v, G.neighbor_set v)
{ to_fun := λ s, ⟨(s.fst, s.snd), s.snd.property⟩,
  inv_fun := λ d, ⟨d.fst, d.snd, d.is_adj⟩,
  left_inv := λ s, by ext; simp,
  right_inv := λ d, by ext; simp }

/-- The edge associated to the dart. -/
def dart.edge (d : G.dart) : V × V := d.to_prod

/-- Two darts are said to be adjacent if they could be consecutive
darts in a walk -- that is, the first dart's second vertex is equal to
the second dart's first vertex. -/
def dart_adj (d d' : G.dart) : Prop := d.snd = d'.fst
/-
## Edge Set 
-/
/-- Give `directed_simple_graph V` the induced partial order from the one 
already defined on  `V → V → Prop`. -/
instance : partial_order (directed_simple_graph V) := partial_order.lift adj ext

def edge_set : directed_simple_graph V ↪o set (V × V) :=
  order_embedding.of_map_le_iff 
  (λ (G : directed_simple_graph V), {p : V × V | G.adj p.1 p.2}) $
begin
  intros G G',
  rw [set.le_eq_subset, set.set_of_subset_set_of, prod.forall],
  refl,
end

@[simp] lemma mem_edge_set {v w : V} : (v, w) ∈ G.edge_set ↔ G.adj v w := iff.rfl

/-- `from_edge_set` constructs a `directed_simple_graph` from a set of edges. -/
@[simps] 
def from_edge_set (s : set (V × V)) : directed_simple_graph V := 
{ adj := λ v w, (v, w) ∈ s }
/-
# Directed Walk
-/
@[derive decidable_eq]
inductive directed_walk : V → V → Type u
| nil {u : V} : directed_walk u u
| cons {u v w: V} (h : G.adj u v) (p : directed_walk v w) : directed_walk u w
/-
## Attribute Nil and One-Edge Walk
-/
attribute [refl] directed_walk.nil

@[simps] instance directed_walk.inhabited (v : V) : 
  inhabited (G.directed_walk v v) := 
⟨directed_walk.nil⟩

/-- The one-edge walk associated to a pair of adjacent vertices. -/
@[pattern, reducible] def adj.to_directed_walk 
  {G : directed_simple_graph V} {u v : V} (h : G.adj u v) : G.directed_walk u v := 
directed_walk.cons h directed_walk.nil
/-
## Abbrevation nil' and cons'
-/
namespace directed_walk
variables {G}

/-- Pattern to get `walk.nil` with the vertex as an explicit argument. -/
@[pattern] abbreviation nil' (u : V) : G.directed_walk u u := directed_walk.nil

/-- Pattern to get `walk.cons` with the vertices as explicit arguments. -/
@[pattern] abbreviation cons' (u v w : V) (h : G.adj u v) (p : G.directed_walk v w) :
G.directed_walk u w := directed_walk.cons h p
/-
## Directed *Acyclic* Simple Graph
-/
/-- A `directed acyclic simple graph`. -/
@[ext]
structure directed_acyclic_simple_graph 
  (V : Type u) (G : directed_simple_graph V)
  extends directed_simple_graph V :=
(acyclic : ∀ v : V, (∀ p : G.directed_walk v v, p = nil))
/-
## Directed *Acyclic Loopless Finite* Simple Graph
-/
/- The Graph we need. -/
/-- A `directed acyclic loopless finite simple graph`. -/
@[ext]
structure directed_acyclic_loopless_finite_simple_graph 
  (V : Type u) (G : directed_simple_graph V)
  extends directed_simple_graph V :=
(finite : fintype V)
(loopless : irreflexive adj . obviously)
(acyclic : ∀ v : V, (∀ p : G.directed_walk v v, p = nil))
/-
## Directed Walk Support, Darts, Edges
-/

/-- The `support` of a directed walk is the list of vertices it visits in order. -/
def support : Π {u v : V}, G.directed_walk u v → list V
| u _ nil := [u]
| u _ (cons h p) := u :: p.support

/-- The `darts` of a directed walk is the list of darts it visits in order. -/
def darts : Π {u v : V}, G.directed_walk u v → list G.dart
| u v nil := []
| u v (cons h p) := ⟨(u, _), h⟩ :: p.darts

/-- The `edges` of a directed walk is the list of edges it visits in order.
This is defined to be the list of edges underlying 
`simple_directed_graph.directed_walk.darts`. -/
def edges {u v : V} (p : G.directed_walk u v) : list (V × V) := 
p.darts.map (dart.edge G)
/-
## Trail, Path, Circuit, Cycle
-/
/-- A `directed_trail` is a directed walk with no repeating edges. -/
structure is_directed_trail {u v : V} (p : G.directed_walk u v) : Prop :=
(edges_nodup : p.edges.nodup)

/-- A `directed_path` is a directed walk with no repeating vertices. -/
structure is_directed_path {u v : V} (p : G.directed_walk u v)
  extends to_directed_trail : is_directed_trail p : Prop :=
(support_nodup : p.support.nodup)

/-- A `directed_circuit` at `u : V` is a nonempty directed trail 
beginning and ending at `u`. -/
structure is_directed_circuit {u : V} (p : G.directed_walk u u) 
  extends to_directed_trail : is_directed_trail p : Prop :=
(ne_nil : p ≠ nil)

/-- A `directed_cycle` at `u : V` is a directed circuit at `u` 
whose only repeating vertex is `u` (which appears exactly twice). -/
structure is_directed_cycle {u : V} (p : G.directed_walk u u)
  extends to_directed_circuit : is_directed_circuit p : Prop :=
(support_nodup : p.support.tail.nodup)
/-
## Path Stuff
-/
/- Look up in Git Repository-/
lemma is_directed_path.mk' {u v : V} {p : G.directed_walk u v} 
(h : p.support.nodup) : is_directed_path p := sorry

lemma is_directed_path_def {u v : V} (p : G.directed_walk u v) : 
  p.is_directed_path ↔ p.support.nodup :=
⟨is_directed_path.support_nodup, is_directed_path.mk'⟩

instance [decidable_eq V] {u v : V} (p : G.directed_walk u v) : 
decidable p.is_directed_path := by { rw is_directed_path_def, apply_instance }

end directed_walk

/-- The type for paths between two vertices. -/
abbreviation directed_path (u v : V) := 
{p : G.directed_walk u v // p.is_directed_path}

namespace directed_path
variables {G}

@[simp] protected lemma is_directed_path {u v : V} (p : G.directed_path u v) : 
(p : G.directed_walk u v).is_directed_path := p.property

@[simp] protected lemma is_directed_trail {u v : V} (p : G.directed_path u v) : 
(p : G.directed_walk u v).is_directed_trail := p.property.to_directed_trail

end directed_path
end directed_simple_graph
/-
# Path System
-/
namespace directed_simple_graph

variables {V : Type u} {u v w: V} 
variables {α : Type*} [fintype α] [decidable_eq α]
variables (G : directed_simple_graph V)

/-- A `path system from A to B`. -/
structure path_system {α : Type*} [fintype α] (A B : α ↪ V) :=
(σ : equiv.perm α)
(path : Π (i : α), G.directed_path (A i) (B (σ i)))

/-- A `vertex-disjoint path system from A to B`. -/
structure vd_path_system {α : Type*} [fintype α] (A B : α ↪ V) 
  extends path_system G A B :=
(walk_disj : 
  ∀ (i j : α), i ≠ j → list.disjoint (path i).1.support (path j).1.support
)

/- This definition is not actually necessary since one can write `s.σ.sign` 
just as easily as `s.sign`. -/
def path_system.sign {α : Type*} [fintype α] [decidable_eq α] {A B : α ↪ V}
  (s : G.path_system A B) :=
s.σ.sign 

def all_vd_path_systems (G : directed_simple_graph V) (A B : α ↪ V) : 
finset (G.vd_path_system A B) := sorry
/-
# Weights
-/
namespace directed_walk

variables {R : Type} [field R]

def walk_weight {G : directed_simple_graph V} 
  (weight : G.edge_set → R) : Π {u v : V}, G.directed_walk u v → R
| u v nil := 1
| u v (cons h p) := weight ⟨(u, _), h⟩ * walk_weight p

def path_weight {G : directed_simple_graph V} 
  (weight : G.edge_set → R) : G.directed_path u v → R :=
λ p, walk_weight weight (p.1)

def path_system_weight {α : Type*} [fintype α] (G : directed_simple_graph V) 
  (weight : G.edge_set → R) (A B : α ↪ V) : G.path_system A B → R :=
λ s, ∏ (i : α), path_weight weight (s.path i)
/-
# Path Matrix
-/
def all_path_ij {G : directed_simple_graph V} (A B : α ↪ V) (i j : α) : 
finset (G.directed_path (A i) (B j)) := sorry

def all_paths_ij_weight {G : directed_simple_graph V} (A B : α ↪ V) (i j : α) 
  (weight : G.edge_set → R) : R := 
∑ (p : (all_path_ij A B i j)), path_weight weight p.1

def path_matrix_map {α : Type*} [fintype α] [decidable_eq α] (A B : α ↪ V) 
  (weight : G.edge_set → R) : α → α → R :=
λ i j, all_paths_ij_weight A B i j weight

def path_matrix (G : directed_simple_graph V) (A B : α ↪ V) 
  (weight : G.edge_set → R) : 
matrix α α R := matrix.of (path_matrix_map G A B weight)

end directed_walk
end directed_simple_graph
/-
# Lindström-Gessel-Viennot Lemma
-/
namespace directed_simple_graph
namespace directed_walk 

lemma Lindstroem_Gessel_Viennot
  (V : Type u) (u v : V) (G : directed_simple_graph V) 
  (g : directed_acyclic_loopless_finite_simple_graph V G)
  (α : Type*) [fintype α] [decidable_eq α] (A B : α ↪ V) (i j : α) 
  (R : Type) [field R] (r : R)
  (weight : g.to_directed_simple_graph.edge_set → R) :

  (path_matrix g.to_directed_simple_graph A B weight).det = 
  ∑ (s : all_vd_path_systems g.to_directed_simple_graph A B), 
    (s.1.σ.sign) * (path_system_weight g.to_directed_simple_graph weight A B s.1.1) :=
  
begin 
  sorry
end 

end directed_walk
end directed_simple_graph
/-
# Proof Support
-/
namespace directed_simple_graph
variables {V : Type u}
variables (G : directed_simple_graph V)
namespace directed_walk
variables {G}
/-
## Directed Walk Length and Concatenation
-/
/-- The length of a walk is the number of edges/darts along it. -/
def length : Π {u v : V}, G.directed_walk u v → ℕ
| _ _ nil := 0
| _ _ (cons _ q) := q.length.succ

/-- The concatenation of two compatible walks. -/
@[trans]
def append : Π {u v w : V}, G.directed_walk u v → G.directed_walk v w → G.directed_walk u w
| _ _ _ nil q := q
| _ _ _ (cons h p) q := cons h (p.append q)
/-
## Directed Walk getting Vertices using Length
-/
/-- Get the `n`th vertex from a walk, where `n` is generally expected to be
between `0` and `p.length`, inclusive.
If `n` is greater than or equal to `p.length`, the result is the path's endpoint. -/
def get_vert : Π {u v : V} (p : G.directed_walk u v) (n : ℕ), V
| u v nil _ := u
| u v (cons _ _) 0 := u
| u v (cons _ q) (n+1) := q.get_vert n

@[simp] lemma get_vert_zero {u v} (w : G.directed_walk u v) : w.get_vert 0 = u :=
by { cases w; refl }

lemma get_vert_of_length_le {u v} (w : G.directed_walk u v) {i : ℕ} (hi : w.length ≤ i) :
  w.get_vert i = v :=
begin
  induction w with _ x y z hxy wyz IH generalizing i,
  { refl },
  { cases i,
    { cases hi, },
    { exact IH (nat.succ_le_succ_iff.1 hi) } }
end

@[simp] lemma get_vert_length {u v} (w : G.directed_walk u v) : w.get_vert w.length = v :=
w.get_vert_of_length_le rfl.le

lemma adj_get_vert_succ {u v} (w : G.directed_walk u v) {i : ℕ} (hi : i < w.length) :
  G.adj (w.get_vert i) (w.get_vert (i+1)) :=
begin
  induction w with _ x y z hxy wyz IH generalizing i,
  { cases hi, },
  { cases i,
    { simp [get_vert, hxy] },
    { exact IH (nat.succ_lt_succ_iff.1 hi) } },
end
/-
## Decomposition
-/
lemma mem_support_nil_iff {u v : V} : u ∈ (nil : G.directed_walk v v).support ↔ u = v := by sorry

section directed_walk_decomp
variables [decidable_eq V]

/-- Given a vertex in the support of a path, give the path up until (and including) that vertex. -/
def take_until : Π {v w : V} (p : G.directed_walk v w) (u : V) (h : u ∈ p.support), G.directed_walk v u
| v w nil u h := by rw mem_support_nil_iff.mp h
| v w (cons r p) u h :=
  if hx : v = u
  then by subst u
  else cons r (take_until p _ $ h.cases_on (λ h', (hx h'.symm).elim) id)

/-- Given a vertex in the support of a path, give the path from (and including) that vertex to
the end. In other words, drop vertices from the front of a path until (and not including)
that vertex. -/
def drop_until : Π {v w : V} (p : G.directed_walk v w) (u : V) (h : u ∈ p.support), G.directed_walk u w
| v w nil u h := by rw mem_support_nil_iff.mp h
| v w (cons r p) u h :=
  if hx : v = u
  then by { subst u, exact cons r p }
  else drop_until p _ $ h.cases_on (λ h', (hx h'.symm).elim) id

end directed_walk_decomp
/-
# Appendix Lemmas
-/
/-
## Directed Walk Concatenation Lemmata
-/
@[simp] lemma cons_append {u v w x : V} (h : G.adj u v) (p : G.directed_walk v w) (q : G.directed_walk w x) :
  (cons h p).append q = cons h (p.append q) := rfl

@[simp] lemma cons_nil_append {u v w : V} (h : G.adj u v) (p : G.directed_walk v w) :
  (cons h nil).append p = cons h p := rfl

@[simp] lemma append_nil : Π {u v : V} (p : G.directed_walk u v), p.append nil = p
| _ _ nil := rfl
| _ _ (cons h p) := by rw [cons_append, append_nil]

@[simp] lemma nil_append {u v : V} (p : G.directed_walk u v) : nil.append p = p := rfl

lemma append_assoc : Π {u v w x : V} (p : G.directed_walk u v) (q : G.directed_walk v w) (r : G.directed_walk w x),
  p.append (q.append r) = (p.append q).append r
| _ _ _ _ nil _ _ := rfl
| _ _ _ _ (cons h p') q r := by { dunfold append, rw append_assoc, }
/-
## Lenght - helpful Lemmas
-/
@[simp] lemma length_nil {u : V} : (nil : G.directed_walk u u).length = 0 := rfl

@[simp] lemma length_cons {u v w : V} (h : G.adj u v) (p : G.directed_walk v w) :
  (cons h p).length = p.length + 1 := rfl

@[simp] lemma length_append : Π {u v w : V} (p : G.directed_walk u v) (q : G.directed_walk v w),
  (p.append q).length = p.length + q.length
| _ _ _ nil _ := by simp
| _ _ _ (cons _ _) _ := by simp [length_append, add_left_comm, add_comm]

lemma eq_of_length_eq_zero : Π {u v : V} {p : G.directed_walk u v}, p.length = 0 → u = v
| _ _ nil _ := rfl

@[simp] lemma exists_length_eq_zero_iff {u v : V} : (∃ (p : G.directed_walk u v), p.length = 0) ↔ u = v :=
begin
  split,
  { rintro ⟨p, hp⟩,
    exact eq_of_length_eq_zero hp, },
  { rintro rfl,
    exact ⟨nil, rfl⟩, },
end

@[simp] lemma length_eq_zero_iff {u : V} {p : G.directed_walk u u} : p.length = 0 ↔ p = nil :=
by cases p; simp
/-
## Length of Support
-/
@[simp] lemma support_nil {u : V} : (nil : G.directed_walk u u).support = [u] := rfl

@[simp] lemma support_cons {u v w : V} (h : G.adj u v) (p : G.directed_walk v w) :
  (cons h p).support = u :: p.support := rfl

@[simp] lemma support_append {u v w : V} (p : G.directed_walk u v) (p' : G.directed_walk v w) :
  (p.append p').support = p.support ++ p'.support.tail :=
by induction p; cases p'; simp [*]

@[simp] lemma length_support {u v : V} (p : G.directed_walk u v) : p.support.length = p.length + 1 :=
by induction p; simp *
/-
## Length of Darts
-/
@[simp] lemma darts_nil {u : V} : (nil : G.directed_walk u u).darts = [] := rfl

@[simp] lemma darts_cons {u v w : V} (h : G.adj u v) (p : G.directed_walk v w) :
  (cons h p).darts = ⟨(u, v), h⟩ :: p.darts := rfl

@[simp] lemma darts_append {u v w : V} (p : G.directed_walk u v) (p' : G.directed_walk v w) :
  (p.append p').darts = p.darts ++ p'.darts :=
by induction p; simp [*]

@[simp] lemma length_darts {u v : V} (p : G.directed_walk u v) : p.darts.length = p.length :=
by induction p; simp *
/-
## Length of Edges
-/
@[simp] lemma length_edges {u v : V} (p : G.directed_walk u v) : p.edges.length = p.length :=
by simp [edges]



end directed_walk
end directed_simple_graph